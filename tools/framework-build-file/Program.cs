using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using D2L.Build.BazelGenerator.NewBuild;
using D2L.Build.BazelGenerator.OldBuild;

namespace D2L.Build.BazelGenerator.Commands {
	internal sealed class GenerateFrameworkBuildFile {
		private static IEnumerable<INewBuildThing> GetBuildFileContents(
			string workspaceRoot
		) {
			// C:\D2L\tmp\external\net: the path to a previously-downloaded
			// copy of the .NET framework reference assemblies.
			var frameworkPackagePath = Path.Combine(
				Path.GetPathRoot( workspaceRoot ),
				"D2L", "tmp", "external", "net"
			);

			// The path to the DLLs inside frameworkPackagePath
			var frameworkContentsPath = Path.Combine(
				frameworkPackagePath,
				"build", ".NETFramework", "v4.7.2"
			);

			var dlls = Directory.EnumerateFiles(
				frameworkContentsPath,
				"*.dll",
				SearchOption.AllDirectories
			).OrderBy( Path.GetFileNameWithoutExtension );

			foreach( var dll in dlls ) {
				yield return FrameworkAssembly
					.LoadFromFile( frameworkPackagePath, dll )
					.Convert( index: null )
					.Single();
			}
		}

		// Probably returns "build/src/D2L.BazelGenerator/Commands/GenerateFrameworkBuildFile.cs"
		private static string SourceCodePath(
			string checkoutRoot,
			[CallerFilePath] string callerFile = null
		) {
			return callerFile.Substring( checkoutRoot.Length + 1 );
		}

		public static void Run(
			string workspaceRoot,
			string checkoutRoot
		) {
			var buildFile = new Label( "net", "", "BUILD.bazel" );

			var imports = GetBuildFileContents( workspaceRoot );

			var package = new Package(
				buildFile,
				imports.ToImmutableArray(),
				$"This file was generated by {SourceCodePath( checkoutRoot )}",
				"Don't edit it by hand! You should regenerate this if the .NET package gets updated."

			);

			var generatedBuildPath = Path.Combine(
				checkoutRoot,
				"build", "rules", "csharp", "private", "netframework.BUILD"
			);

			package.WriteCustomOutputPath( generatedBuildPath );
		}
	}
}