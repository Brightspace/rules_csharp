using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using D2L.Build.BazelGenerator.NewBuild;
using D2L.Build.BazelGenerator.OldBuild;

namespace FrameworkBuilder {
  public static class Program {
    public static void Main (string[] args) {
      if (args.Length < 2) {
        Console.WriteLine ("Missing required argument of current path.");
        return;
      }

      var workspace = args[0];
      var generatedBuildPath = args[1];
      Console.WriteLine ($"Working out of {workspace}");

      var dlls = Directory.EnumerateFiles (
        workspace,
        "*.dll",
        SearchOption.AllDirectories
      ).OrderBy (Path.GetFileNameWithoutExtension);

      var workspaceUri = new Uri (workspace);
      foreach (var dll in dlls) {
        var relativeUri = workspaceUri.MakeRelativeUri (new Uri (dll));
        // Console.WriteLine ($"{relativeUri}");
      }

      //rules
      var imports = dlls.Select (dll => FrameworkAssembly
        .LoadFromFile (workspace, dll)
        .Convert (index: null)
        .Single ());

      var buildFile = new Label ("net", "", "BUILD.bazel");

      // var imports = new INewBuildThing[] { };

      var package = new Package (
        buildFile,
        imports.ToImmutableArray (),
        $"This file was generated by //:tools/frameworks:generator",
        "Don't edit it by hand! You should regenerate this if the .NET package gets updated."

      );

      package.WriteCustomOutputPath (generatedBuildPath);
      // foreach (var dll in dlls) {
      //   var item = FrameworkAssembly
      //     .LoadFromFile (workspace, dll)
      //     .Convert (index: null)
      //     .Single ();
      //   Console.WriteLine (item.GetType ());
      // }

      //Construct a package from this
    }

    public static void Run (
      string workspaceRoot,
      string checkoutRoot
    ) {
      var buildFile = new Label ("net", "", "BUILD.bazel");

      var imports = new INewBuildThing[] { };

      var package = new Package (
        buildFile,
        imports.ToImmutableArray (),
        $"This file was generated by //:tools/frameworks:generator",
        "Don't edit it by hand! You should regenerate this if the .NET package gets updated."

      );

      var generatedBuildPath = Path.Combine (
        checkoutRoot,
        "build", "rules", "csharp", "private", "netframework.BUILD"
      );

      package.WriteCustomOutputPath (generatedBuildPath);
    }
  }
}